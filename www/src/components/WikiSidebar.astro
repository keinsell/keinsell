---
import { getCollection } from "astro:content";

interface Props {
    currentPage?: string;
}

const { currentPage } = Astro.props;

// Get all docs content to build the graph
const allDocs = await getCollection("docs");

// Build nodes and edges for the graph
const nodes = allDocs.map((doc) => ({
  id: doc.id,
  title: doc.data.title,
  url: `/docs/${doc.id}/`,
  category: doc.id.startsWith('patterns/') ? 'pattern' : 'implementation',
  isCurrent: currentPage && (`/docs/${doc.id}/` === currentPage || doc.id === currentPage)
}));

const edges = [];

// Create edges based on relationships
allDocs.forEach((doc) => {
  // If it's an implementation, link to its pattern
  if (doc.data.pattern) {
    const patternNode = nodes.find(n => n.id === `patterns/${doc.data.pattern}`);
    if (patternNode) {
      edges.push({
        source: doc.id,
        target: patternNode.id,
        label: 'implements'
      });
    }
  }
  
  // If it's a pattern, link to its implementations
  if (doc.data.implementations) {
    doc.data.implementations.forEach(impl => {
      const implNode = nodes.find(n => n.id === `implementations/${impl}`);
      if (implNode) {
        edges.push({
          source: doc.id,
          target: implNode.id,
          label: 'has implementation'
        });
      }
    });
  }
});

// Find connected nodes to current page
const getConnectedNodes = (currentId) => {
  if (!currentId) return [];
  
  const connected = new Set();
  
  // Find directly connected nodes
  edges.forEach(edge => {
    if (edge.source === currentId) {
      connected.add(edge.target);
    }
    if (edge.target === currentId) {
      connected.add(edge.source);
    }
  });
  
  return Array.from(connected).map(id => nodes.find(n => n.id === id)).filter(Boolean);
};

const currentNode = currentPage ? nodes.find(n => n.isCurrent) : null;
const connectedNodes = currentNode ? getConnectedNodes(currentNode.id) : [];

const graphData = { nodes, edges };
---

<div class="wiki-sidebar">
  <!-- Navigation Section -->
  <div class="sidebar-section">
    <h3>Quick Navigation</h3>
    <div class="nav-items">
      <a href="/docs/" class={currentPage === '/docs/' ? 'active' : ''}>‚Üê Wiki Home</a>
      <a href="/docs/patterns/fasade/" class={currentPage === '/docs/patterns/fasade/' ? 'active' : ''}>Facade Pattern</a>
      <a href="/docs/implementations/preferences/" class={currentPage === '/docs/implementations/preferences/' ? 'active' : ''}>Preferences Impl</a>
    </div>
  </div>

  <!-- Current Page Connections -->
  {currentNode && connectedNodes.length > 0 && (
    <div class="sidebar-section">
      <h3>Connected Pages</h3>
      <div class="connected-items">
        {connectedNodes.map(node => (
          <a href={node.url} class="connected-item">
            <span class="connection-type">{node.category}</span>
            {node.title}
          </a>
        ))}
      </div>
    </div>
  )}

  <!-- Interactive Graph -->
  <div class="sidebar-section">
    <h3>Knowledge Graph</h3>
    <div id="sidebar-graph" class="graph-container"></div>
  </div>

  <!-- All Pages List -->
  <div class="sidebar-section">
    <h3>All Pages</h3>
    <div class="all-pages">
      <div class="page-group">
        <h4>Patterns</h4>
        {nodes.filter(n => n.category === 'pattern').map(node => (
          <a href={node.url} class={node.isCurrent ? 'active' : ''}>{node.title}</a>
        ))}
      </div>
      <div class="page-group">
        <h4>Implementations</h4>
        {nodes.filter(n => n.category === 'implementation').map(node => (
          <a href={node.url} class={node.isCurrent ? 'active' : ''}>{node.title}</a>
        ))}
      </div>
    </div>
  </div>
</div>

<script define:vars={{ graphData, currentPage }}>
  // Interactive graph for sidebar
  const container = document.getElementById('sidebar-graph');
  
  if (container && graphData.nodes.length > 0) {
    // Create an interactive SVG-based graph
    const width = 280;
    const height = 200;
    
    // Create SVG element
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('width', width);
    svg.setAttribute('height', height);
    svg.style.border = '1px solid #eee';
    svg.style.background = '#fff';
    
    // Simple force-directed layout simulation
    const centerX = width / 2;
    const centerY = height / 2;
    const radius = Math.min(width, height) / 3;
    
    // Position nodes in a circle
    const nodePositions = {};
    graphData.nodes.forEach((node, index) => {
      const angle = (index / graphData.nodes.length) * 2 * Math.PI;
      nodePositions[node.id] = {
        x: centerX + Math.cos(angle) * radius,
        y: centerY + Math.sin(angle) * radius
      };
    });
    
    // Draw edges
    graphData.edges.forEach(edge => {
      const sourcePos = nodePositions[edge.source];
      const targetPos = nodePositions[edge.target];
      
      if (sourcePos && targetPos) {
        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('x1', sourcePos.x);
        line.setAttribute('y1', sourcePos.y);
        line.setAttribute('x2', targetPos.x);
        line.setAttribute('y2', targetPos.y);
        line.setAttribute('stroke', '#ccc');
        line.setAttribute('stroke-width', '1');
        svg.appendChild(line);
      }
    });
    
    // Draw nodes
    graphData.nodes.forEach(node => {
      const pos = nodePositions[node.id];
      if (!pos) return;
      
      const isCurrent = currentPage && (node.url === currentPage || node.id === currentPage);
      
      // Node circle
      const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
      circle.setAttribute('cx', pos.x);
      circle.setAttribute('cy', pos.y);
      circle.setAttribute('r', isCurrent ? '8' : '6');
      circle.setAttribute('fill', node.category === 'pattern' ? '#0000ff' : '#666');
      circle.setAttribute('stroke', isCurrent ? '#ff0000' : 'none');
      circle.setAttribute('stroke-width', '2');
      circle.style.cursor = 'pointer';
      
      // Click handler
      circle.addEventListener('click', () => {
        window.location.href = node.url;
      });
      
      // Hover effect
      circle.addEventListener('mouseenter', () => {
        circle.setAttribute('r', isCurrent ? '10' : '8');
      });
      
      circle.addEventListener('mouseleave', () => {
        circle.setAttribute('r', isCurrent ? '8' : '6');
      });
      
      svg.appendChild(circle);
      
      // Node label (abbreviated)
      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
      text.setAttribute('x', pos.x);
      text.setAttribute('y', pos.y + 20);
      text.setAttribute('text-anchor', 'middle');
      text.setAttribute('font-family', 'monospace');
      text.setAttribute('font-size', '9');
      text.setAttribute('fill', '#000');
      text.style.cursor = 'pointer';
      text.textContent = node.title.length > 12 ? node.title.substring(0, 12) + '...' : node.title;
      
      // Click handler for text
      text.addEventListener('click', () => {
        window.location.href = node.url;
      });
      
      svg.appendChild(text);
    });
    
    container.appendChild(svg);
    
    // Apply dark mode styles if needed
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      svg.style.background = '#1a1a1a';
      svg.style.borderColor = '#333';
      
      // Update text colors for dark mode
      const texts = svg.querySelectorAll('text');
      texts.forEach(text => {
        text.setAttribute('fill', '#ccc');
      });
      
      // Update node colors for dark mode
      const circles = svg.querySelectorAll('circle');
      circles.forEach(circle => {
        const currentFill = circle.getAttribute('fill');
        if (currentFill === '#0000ff') {
          circle.setAttribute('fill', '#88f');
        } else if (currentFill === '#666') {
          circle.setAttribute('fill', '#999');
        }
      });
    }
  } else {
    container.innerHTML = '<div style="padding: 10px; text-align: center; color: #666; font-size: 10px;">No graph data</div>';
  }
</script>

<style>
  .wiki-sidebar {
    font-family: monospace;
    font-size: 11px;
    line-height: 1.3;
  }
  
  .sidebar-section {
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #eee;
  }
  
  .sidebar-section:last-child {
    border-bottom: none;
  }
  
  .sidebar-section h3 {
    font-size: 12px;
    font-weight: bold;
    margin-bottom: 8px;
    color: #000;
  }
  
  .sidebar-section h4 {
    font-size: 11px;
    font-weight: bold;
    margin-bottom: 4px;
    margin-top: 8px;
    color: #333;
  }
  
  .nav-items a,
  .connected-items a,
  .all-pages a {
    display: block;
    color: #0000ff;
    text-decoration: underline;
    margin-bottom: 3px;
    padding: 1px 0;
  }
  
  .nav-items a:hover,
  .connected-items a:hover,
  .all-pages a:hover {
    background: #0000ff;
    color: #fff;
    text-decoration: none;
  }
  
  .nav-items a.active,
  .all-pages a.active {
    background: #000;
    color: #fff;
    text-decoration: none;
    padding: 1px 2px;
  }
  
  .connected-item {
    padding: 2px 0;
  }
  
  .connection-type {
    display: inline-block;
    font-size: 9px;
    color: #666;
    background: #f5f5f5;
    padding: 1px 3px;
    margin-right: 4px;
    border-radius: 2px;
  }
  
  .graph-container {
    margin: 8px 0;
    padding: 5px;
    border: 1px solid #eee;
    background: #fff;
    border-radius: 3px;
  }
  
  .page-group {
    margin-bottom: 10px;
  }
  
  .page-group a {
    font-size: 10px;
    margin-left: 8px;
  }
  
  @media (prefers-color-scheme: dark) {
    .sidebar-section {
      border-color: #333;
    }
    
    .sidebar-section h3 {
      color: #ccc;
    }
    
    .sidebar-section h4 {
      color: #aaa;
    }
    
    .nav-items a,
    .connected-items a,
    .all-pages a {
      color: #88f;
    }
    
    .nav-items a:hover,
    .connected-items a:hover,
    .all-pages a:hover {
      background: #88f;
      color: #000;
    }
    
    .nav-items a.active,
    .all-pages a.active {
      background: #fff;
      color: #000;
    }
    
    .connection-type {
      color: #999;
      background: #222;
    }
    
    .graph-container {
      border-color: #333;
      background: #1a1a1a;
    }
  }
</style>