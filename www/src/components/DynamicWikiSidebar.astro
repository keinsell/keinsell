---
import { getCollection } from "astro:content";
import { 
  buildNavigationTree, 
  findRelatedContent,
  getDirectoryStructure 
} from "../utils/wiki.ts";
import { inferContentType } from "../utils/categorization.ts";

interface Props {
  currentPage?: string;
}

const { currentPage } = Astro.props;

// Get all docs content to build dynamic structure
const allDocs = await getCollection("docs");

// Build dynamic navigation tree based on actual content structure
const navigationTree = buildNavigationTree(allDocs, currentPage);

// Find current document for relationships
const currentDoc = currentPage ? allDocs.find(doc => 
  `/docs/${doc.id}/` === currentPage || doc.id === currentPage.replace('/docs/', '').replace('/', '')
) : null;

// Get related content
const relatedContent = currentDoc ? findRelatedContent(currentDoc, allDocs) : [];

// Build simplified graph data for visualization
const graphNodes = allDocs.map(doc => ({
  id: doc.id,
  title: doc.data.title,
  url: `/docs/${doc.id}/`,
  type: inferContentType(doc),
  isCurrent: currentPage && (`/docs/${doc.id}/` === currentPage || doc.id === currentPage)
}));

const graphEdges = [];
allDocs.forEach(doc => {
  // Create edges based on relationships
  if (doc.data.pattern) {
    const patternNode = graphNodes.find(n => n.id === `patterns/${doc.data.pattern}`);
    if (patternNode) {
      graphEdges.push({
        source: doc.id,
        target: patternNode.id,
        type: 'implements'
      });
    }
  }
  
  if (doc.data.implementations) {
    doc.data.implementations.forEach(impl => {
      const implNode = graphNodes.find(n => n.id === `implementations/${impl}`);
      if (implNode) {
        graphEdges.push({
          source: doc.id,
          target: implNode.id,
          type: 'has-implementation'
        });
      }
    });
  }
  
  if (doc.data.relatedPages) {
    doc.data.relatedPages.forEach(pageId => {
      const relatedNode = graphNodes.find(n => n.id === pageId);
      if (relatedNode) {
        graphEdges.push({
          source: doc.id,
          target: relatedNode.id,
          type: 'related'
        });
      }
    });
  }
});

const graphData = { nodes: graphNodes, edges: graphEdges };

// Helper function to render navigation nodes recursively
function renderNavigationNode(node, level = 0) {
  const indent = level * 12;
  const hasChildren = node.children && node.children.length > 0;
  
  return {
    ...node,
    indent,
    hasChildren,
    children: hasChildren ? node.children.map(child => renderNavigationNode(child, level + 1)) : []
  };
}

const processedNavigationTree = navigationTree.map(node => renderNavigationNode(node));
---

<div class="dynamic-wiki-sidebar">
  <!-- Quick Navigation based on directory structure -->
  <div class="sidebar-section">
    <h3>Navigation</h3>
    <div class="navigation-tree">
      <a href="/docs/" class={currentPage === '/docs/' ? 'nav-link active directory' : 'nav-link directory'}>
        <span class="nav-icon">▣</span>
        Wiki Home
      </a>
      {processedNavigationTree.map(node => (
        <div class="nav-node" style={`margin-left: ${node.indent}px`}>
          <a 
            href={node.url} 
            class={`nav-link ${node.isActive ? 'active' : ''} ${node.type === 'directory' ? 'directory' : 'file'}`}
            data-type={node.type}
          >
            <span class="nav-icon">
              {node.type === 'directory' ? '▶' : '•'}
            </span>
            {node.title}
            {node.template && (
              <span class={`template-badge ${node.template}`}>{node.template}</span>
            )}
          </a>
          {node.hasChildren && (
            <div class="nav-children">
              {node.children.map(child => (
                <div class="nav-node" style={`margin-left: ${child.indent}px`}>
                  <a 
                    href={child.url} 
                    class={`nav-link ${child.isActive ? 'active' : ''} ${child.type === 'directory' ? 'directory' : 'file'}`}
                    data-type={child.type}
                  >
                    <span class="nav-icon">
                      {child.type === 'directory' ? '▶' : '•'}
                    </span>
                    {child.title}
                    {child.template && (
                      <span class={`template-badge ${child.template}`}>{child.template}</span>
                    )}
                  </a>
                </div>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>
  </div>

  <!-- Current Page Relationships -->
  {relatedContent.length > 0 && (
    <div class="sidebar-section">
      <h3>Related Content</h3>
      <div class="related-items">
        {relatedContent.map(doc => (
          <a href={`/docs/${doc.id}/`} class="related-item">
            <span class="content-type">{doc.data.template || 'default'}</span>
            <span class="content-title">{doc.data.title}</span>
          </a>
        ))}
      </div>
    </div>
  )}

  <!-- Interactive Knowledge Graph (only show on non-home pages) -->
  {currentPage !== '/docs/' && (
    <div class="sidebar-section">
      <h3>Knowledge Graph</h3>
      <div id="dynamic-graph" class="graph-container"></div>
      <div class="graph-legend">
        <div class="legend-item">
          <span class="legend-dot pattern"></span>
          <span>Patterns</span>
        </div>
        <div class="legend-item">
          <span class="legend-dot implementation"></span>
          <span>Implementations</span>
        </div>
        <div class="legend-item">
          <span class="legend-dot guide"></span>
          <span>Guides</span>
        </div>
      </div>
    </div>
  )}

  <!-- Directory Structure Overview -->
  <div class="sidebar-section">
    <h3>Browse by Type</h3>
    <div class="type-links">
      <a href="/docs/patterns/" class="type-link">
        <span class="type-icon">◊</span>
        <span>Design Patterns</span>
      </a>
      <a href="/docs/implementations/" class="type-link">
        <span class="type-icon">▣</span>
        <span>Implementations</span>
      </a>
      {allDocs.some(doc => doc.id.startsWith('guides/')) && (
        <a href="/docs/guides/" class="type-link">
          <span class="type-icon">▸</span>
          <span>Guides</span>
        </a>
      )}
      {allDocs.some(doc => doc.id.startsWith('tutorials/')) && (
        <a href="/docs/tutorials/" class="type-link">
          <span class="type-icon">⚬</span>
          <span>Tutorials</span>
        </a>
      )}
    </div>
  </div>
</div>

<script define:vars={{ graphData, currentPage }}>
  // Create interactive graph visualization (only on non-home pages)
  const container = document.getElementById('dynamic-graph');
  
  // Skip graph creation if we're on the home page
  if (currentPage === '/docs/') {
    return;
  }
  
  if (container && graphData.nodes.length > 0) {
    const width = 280;
    const height = 180;
    
    // Create SVG
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('width', width);
    svg.setAttribute('height', height);
    svg.style.border = '1px solid #eee';
    svg.style.background = '#fff';
    
    // Position nodes using a simple force-directed layout
    const centerX = width / 2;
    const centerY = height / 2;
    const radius = Math.min(width, height) / 3;
    
    const nodePositions = {};
    
    // Group nodes by type for better positioning
    const nodesByType = {};
    graphData.nodes.forEach(node => {
      const type = node.type || 'default';
      if (!nodesByType[type]) nodesByType[type] = [];
      nodesByType[type].push(node);
    });
    
    // Position nodes in concentric circles by type
    let typeIndex = 0;
    Object.entries(nodesByType).forEach(([type, nodes]) => {
      const typeRadius = radius * (0.5 + typeIndex * 0.3);
      nodes.forEach((node, index) => {
        const angle = (index / nodes.length) * 2 * Math.PI + (typeIndex * Math.PI / 4);
        nodePositions[node.id] = {
          x: centerX + Math.cos(angle) * typeRadius,
          y: centerY + Math.sin(angle) * typeRadius
        };
      });
      typeIndex++;
    });
    
    // Draw edges
    graphData.edges.forEach(edge => {
      const sourcePos = nodePositions[edge.source];
      const targetPos = nodePositions[edge.target];
      
      if (sourcePos && targetPos) {
        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('x1', sourcePos.x);
        line.setAttribute('y1', sourcePos.y);
        line.setAttribute('x2', targetPos.x);
        line.setAttribute('y2', targetPos.y);
        line.setAttribute('stroke', edge.type === 'implements' ? '#666' : '#ddd');
        line.setAttribute('stroke-width', edge.type === 'implements' ? '2' : '1');
        line.setAttribute('stroke-dasharray', edge.type === 'related' ? '2,2' : 'none');
        svg.appendChild(line);
      }
    });
    
    // Draw nodes
    graphData.nodes.forEach(node => {
      const pos = nodePositions[node.id];
      if (!pos) return;
      
      const isCurrent = currentPage && (node.url === currentPage || node.id === currentPage);
      
      // Node color based on type (grayscale)
      let nodeColor = '#999';
      if (node.type === 'pattern') nodeColor = '#333';
      if (node.type === 'implementation') nodeColor = '#666';
      if (node.type === 'guide') nodeColor = '#777';
      if (node.type === 'tutorial') nodeColor = '#555';
      
      // Node circle
      const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
      circle.setAttribute('cx', pos.x);
      circle.setAttribute('cy', pos.y);
      circle.setAttribute('r', isCurrent ? '7' : '5');
      circle.setAttribute('fill', nodeColor);
      circle.setAttribute('stroke', isCurrent ? '#000' : 'none');
      circle.setAttribute('stroke-width', '2');
      circle.style.cursor = 'pointer';
      
      // Hover and click handlers
      circle.addEventListener('click', () => {
        window.location.href = node.url;
      });
      
      circle.addEventListener('mouseenter', () => {
        circle.setAttribute('r', isCurrent ? '9' : '7');
        // Show tooltip
        const tooltip = document.createElement('div');
        tooltip.textContent = node.title;
        tooltip.style.position = 'absolute';
        tooltip.style.background = '#000';
        tooltip.style.color = '#fff';
        tooltip.style.padding = '2px 6px';
        tooltip.style.fontSize = '10px';
        tooltip.style.borderRadius = '2px';
        tooltip.style.pointerEvents = 'none';
        tooltip.style.zIndex = '1000';
        tooltip.id = 'graph-tooltip';
        document.body.appendChild(tooltip);
      });
      
      circle.addEventListener('mouseleave', () => {
        circle.setAttribute('r', isCurrent ? '7' : '5');
        const tooltip = document.getElementById('graph-tooltip');
        if (tooltip) tooltip.remove();
      });
      
      circle.addEventListener('mousemove', (e) => {
        const tooltip = document.getElementById('graph-tooltip');
        if (tooltip) {
          tooltip.style.left = (e.pageX + 10) + 'px';
          tooltip.style.top = (e.pageY - 20) + 'px';
        }
      });
      
      svg.appendChild(circle);
    });
    
    container.appendChild(svg);
    
    // Apply dark mode if needed
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      svg.style.background = '#1a1a1a';
      svg.style.borderColor = '#333';
    }
  } else {
    container.innerHTML = '<div class="no-graph">No graph data available</div>';
  }
</script>

<style>
  .dynamic-wiki-sidebar {
    font-family: monospace;
    font-size: 11px;
    line-height: 1.3;
  }
  
  .sidebar-section {
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #eee;
  }
  
  .sidebar-section:last-child {
    border-bottom: none;
  }
  
  .sidebar-section h3 {
    font-size: 12px;
    font-weight: bold;
    margin-bottom: 8px;
    color: #000;
  }
  
  /* Navigation Tree */
  .navigation-tree {
    font-size: 10px;
  }
  
  .nav-node {
    margin-bottom: 2px;
  }
  
  .nav-link {
    display: flex;
    align-items: center;
    gap: 4px;
    color: #0000ff;
    text-decoration: none;
    padding: 1px 2px;
    border-radius: 2px;
  }
  
  .nav-link:hover {
    background: #f0f0f0;
  }
  
  .nav-link.active {
    background: #000;
    color: #fff;
  }
  
  .nav-link.directory {
    font-weight: bold;
  }
  
  .nav-icon {
    font-size: 8px;
    width: 12px;
    text-align: center;
  }
  
  .template-badge {
    font-size: 8px;
    padding: 0 2px;
    margin-left: 4px;
    border-radius: 1px;
    background: #f0f0f0;
    color: #666;
  }
  
  .template-badge.pattern { background: #e3f2fd; color: #1565c0; }
  .template-badge.implementation { background: #fff3e0; color: #ef6c00; }
  .template-badge.guide { background: #e8f5e8; color: #2e7d32; }
  .template-badge.tutorial { background: #f3e5f5; color: #7b1fa2; }
  
  /* Related Content */
  .related-items {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }
  
  .related-item {
    display: flex;
    flex-direction: column;
    padding: 4px 6px;
    border: 1px solid #eee;
    text-decoration: none;
    color: inherit;
    border-radius: 2px;
  }
  
  .related-item:hover {
    background: #f0f0f0;
  }
  
  .content-type {
    font-size: 9px;
    color: #666;
    text-transform: uppercase;
  }
  
  .content-title {
    font-size: 10px;
    color: #0000ff;
  }
  
  /* Graph */
  .graph-container {
    margin: 8px 0;
    padding: 5px;
    border: 1px solid #eee;
    background: #fff;
    border-radius: 3px;
    min-height: 180px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .graph-legend {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 5px;
  }
  
  .legend-item {
    display: flex;
    align-items: center;
    gap: 2px;
    font-size: 9px;
  }
  
  .legend-dot {
    width: 6px;
    height: 6px;
    border-radius: 50%;
  }
  
  .legend-dot.pattern { background: #333; }
  .legend-dot.implementation { background: #666; }
  .legend-dot.guide { background: #777; }
  
  .no-graph {
    text-align: center;
    color: #666;
    font-size: 10px;
    padding: 20px;
  }
  
  /* Type Links */
  .type-links {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }
  
  .type-link {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 4px 6px;
    text-decoration: none;
    color: #0000ff;
    border: 1px solid #eee;
    border-radius: 2px;
  }
  
  .type-link:hover {
    background: #f0f0f0;
    border-color: #ddd;
  }
  
  .type-icon {
    font-size: 10px;
  }
  
  /* Dark mode */
  @media (prefers-color-scheme: dark) {
    .sidebar-section {
      border-color: #333;
    }
    
    .sidebar-section h3 {
      color: #ccc;
    }
    
    .nav-link {
      color: #88f;
    }
    
    .nav-link:hover {
      background: #333;
    }
    
    .nav-link.active {
      background: #fff;
      color: #000;
    }
    
    .template-badge {
      background: #333;
      color: #aaa;
    }
    
    .related-item,
    .type-link {
      border-color: #333;
      background: #222;
    }
    
    .related-item:hover,
    .type-link:hover {
      background: #333;
    }
    
    .content-type {
      color: #999;
    }
    
    .content-title,
    .type-link {
      color: #88f;
    }
    
    .graph-container {
      border-color: #333;
      background: #1a1a1a;
    }
  }
</style>