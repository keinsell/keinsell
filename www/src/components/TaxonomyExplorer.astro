---
import { getCollection } from "astro:content";
import { buildTaxonomy, buildTagCloud, CATEGORY_HIERARCHY, TAG_FACETS, validateDocumentCategorization } from "../utils/categorization.ts";

const allDocs = await getCollection("docs");
const taxonomy = buildTaxonomy(allDocs);
const tagCloud = buildTagCloud(allDocs);

// Group tags by facet
const tagsByFacet = tagCloud.reduce((acc, tag) => {
  if (!acc[tag.type]) acc[tag.type] = [];
  acc[tag.type].push(tag);
  return acc;
}, {} as Record<string, typeof tagCloud>);

// Get validation issues
const validationIssues = allDocs.map(doc => ({
  doc,
  validation: validateDocumentCategorization(doc)
})).filter(item => !item.validation.valid);
---

<div class="taxonomy-explorer">
  <div class="taxonomy-header">
    <h2>Knowledge Organization</h2>
    <p>A systematic classification of content following categorization theory principles.</p>
  </div>

  <div class="taxonomy-grid">
    <!-- Collections (Structural Organization) -->
    <div class="taxonomy-section">
      <h3>Collections</h3>
      <p class="section-description">Structural organization based on content type and purpose.</p>
      <div class="collection-list">
        {taxonomy.children.filter(node => node.type === 'collection').map(collection => (
          <div class="collection-item">
            <h4>{collection.label}</h4>
            <span class="count">{collection.children.length} items</span>
            {collection.metadata?.description && (
              <p class="description">{collection.metadata.description}</p>
            )}
          </div>
        ))}
      </div>
    </div>

    <!-- Categories (Hierarchical Taxonomy) -->
    <div class="taxonomy-section">
      <h3>Category Hierarchy</h3>
      <p class="section-description">Hierarchical classification following software engineering taxonomy.</p>
      <div class="category-tree">
        {Object.values(CATEGORY_HIERARCHY).filter(cat => !cat.parent).map(category => (
          <div class="category-node">
            <h4>{category.name}</h4>
            {category.children.length > 0 && (
              <ul class="subcategories">
                {category.children.map(childId => {
                  const child = CATEGORY_HIERARCHY[childId];
                  return child ? (
                    <li>
                      <span class="subcategory">{child.name}</span>
                      {child.description && (
                        <span class="description">- {child.description}</span>
                      )}
                    </li>
                  ) : null;
                })}
              </ul>
            )}
          </div>
        ))}
      </div>
    </div>

    <!-- Tag Facets (Multi-dimensional Classification) -->
    <div class="taxonomy-section">
      <h3>Tag Facets</h3>
      <p class="section-description">Multi-dimensional classification through controlled vocabulary.</p>
      <div class="facet-list">
        {Object.entries(tagsByFacet).map(([facet, tags]) => (
          <div class="facet-group">
            <h4>{facet.charAt(0).toUpperCase() + facet.slice(1)}</h4>
            <div class="tag-cloud">
              {tags.map(tag => (
                <span class="tag" data-weight={tag.weight}>
                  {tag.name} <span class="weight">({tag.weight})</span>
                </span>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <!-- Validation Issues -->
  {validationIssues.length > 0 && (
    <div class="validation-section">
      <h3>Categorization Issues</h3>
      <p class="section-description">Documents with incomplete or invalid categorization.</p>
      <div class="issue-list">
        {validationIssues.slice(0, 5).map(({ doc, validation }) => (
          <div class="issue-item">
            <h4>{doc.data.title}</h4>
            <ul class="issues">
              {validation.issues.map(issue => (
                <li class="issue">{issue}</li>
              ))}
            </ul>
            {validation.suggestions.categories.length > 0 && (
              <div class="suggestions">
                <strong>Suggested categories:</strong> {validation.suggestions.categories.join(', ')}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  )}

  <!-- Categorization Guidelines -->
  <div class="guidelines-section">
    <h3>Categorization Guidelines</h3>
    <div class="guidelines-grid">
      <div class="guideline">
        <h4>Collections</h4>
        <p>Based on document structure and location. Automatically determined by file path.</p>
      </div>
      <div class="guideline">
        <h4>Categories</h4>
        <p>Hierarchical classification. Each document should have exactly one category.</p>
      </div>
      <div class="guideline">
        <h4>Tags</h4>
        <p>Multi-faceted labels. Use 3-5 tags from different facets for optimal classification.</p>
      </div>
    </div>
  </div>
</div>

<style>
  .taxonomy-explorer {
    margin: 30px 0;
    font-family: monospace;
    font-size: 11px;
  }

  .taxonomy-header {
    margin-bottom: 20px;
  }

  .taxonomy-header h2 {
    font-size: 16px;
    font-weight: bold;
    margin-bottom: 5px;
  }

  .taxonomy-header p {
    font-size: 12px;
    color: #666;
  }

  .taxonomy-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }

  .taxonomy-section {
    border: 1px solid #eee;
    padding: 15px;
    background: #f9f9f9;
    border-radius: 3px;
  }

  .taxonomy-section h3 {
    font-size: 13px;
    font-weight: bold;
    margin-bottom: 5px;
  }

  .section-description {
    font-size: 10px;
    color: #666;
    margin-bottom: 10px;
  }

  .collection-item,
  .category-node {
    margin-bottom: 10px;
    padding: 8px;
    background: #fff;
    border: 1px solid #eee;
    border-radius: 2px;
  }

  .collection-item h4,
  .category-node h4 {
    font-size: 12px;
    font-weight: bold;
    margin-bottom: 3px;
  }

  .count {
    font-size: 10px;
    color: #666;
  }

  .description {
    font-size: 10px;
    color: #777;
    margin-top: 2px;
  }

  .subcategories {
    margin-left: 15px;
    margin-top: 5px;
    list-style: none;
  }

  .subcategories li {
    font-size: 10px;
    margin-bottom: 2px;
  }

  .subcategory {
    font-weight: bold;
  }

  .facet-group {
    margin-bottom: 15px;
  }

  .facet-group h4 {
    font-size: 11px;
    font-weight: bold;
    margin-bottom: 5px;
    color: #444;
  }

  .tag-cloud {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
  }

  .tag {
    display: inline-block;
    padding: 2px 6px;
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 2px;
    font-size: 10px;
  }

  .tag[data-weight="1"] { font-size: 10px; }
  .tag[data-weight="2"] { font-size: 11px; font-weight: bold; }
  .tag[data-weight="3"] { font-size: 12px; font-weight: bold; }

  .weight {
    font-size: 9px;
    color: #999;
  }

  .validation-section {
    margin-top: 20px;
    padding: 15px;
    background: #fef6f6;
    border: 1px solid #f8d7da;
    border-radius: 3px;
  }

  .validation-section h3 {
    font-size: 13px;
    font-weight: bold;
    margin-bottom: 10px;
    color: #721c24;
  }

  .issue-item {
    margin-bottom: 10px;
    padding: 8px;
    background: #fff;
    border: 1px solid #f5c6cb;
    border-radius: 2px;
  }

  .issue-item h4 {
    font-size: 11px;
    font-weight: bold;
    margin-bottom: 5px;
  }

  .issues {
    list-style: none;
    margin-left: 0;
  }

  .issue {
    font-size: 10px;
    color: #721c24;
    margin-bottom: 2px;
  }

  .issue::before {
    content: "â–¸ ";
  }

  .suggestions {
    font-size: 10px;
    color: #155724;
    margin-top: 5px;
    padding: 4px;
    background: #d4edda;
    border-radius: 2px;
  }

  .guidelines-section {
    margin-top: 20px;
    padding: 15px;
    background: #f0f8ff;
    border: 1px solid #b8daff;
    border-radius: 3px;
  }

  .guidelines-section h3 {
    font-size: 13px;
    font-weight: bold;
    margin-bottom: 10px;
    color: #004085;
  }

  .guidelines-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
  }

  .guideline {
    padding: 8px;
    background: #fff;
    border: 1px solid #bee5eb;
    border-radius: 2px;
  }

  .guideline h4 {
    font-size: 11px;
    font-weight: bold;
    margin-bottom: 3px;
    color: #004085;
  }

  .guideline p {
    font-size: 10px;
    color: #555;
  }

  @media (prefers-color-scheme: dark) {
    .taxonomy-section {
      background: #222;
      border-color: #333;
    }

    .collection-item,
    .category-node {
      background: #1a1a1a;
      border-color: #333;
    }

    .tag {
      background: #333;
      border-color: #444;
      color: #ccc;
    }

    .validation-section {
      background: #3a1a1a;
      border-color: #5a2a2a;
    }

    .validation-section h3 {
      color: #f88;
    }

    .issue-item {
      background: #2a1a1a;
      border-color: #4a2a2a;
    }

    .issue {
      color: #f88;
    }

    .suggestions {
      background: #1a3a1a;
      color: #8f8;
    }

    .guidelines-section {
      background: #1a2a3a;
      border-color: #2a4a6a;
    }

    .guidelines-section h3 {
      color: #88f;
    }

    .guideline {
      background: #1a1a2a;
      border-color: #2a3a4a;
    }

    .guideline h4 {
      color: #88f;
    }

    .section-description,
    .description,
    .count,
    .weight {
      color: #999;
    }
  }
</style>