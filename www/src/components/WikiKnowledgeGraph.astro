---
import { getCollection } from "astro:content";
import { inferContentType } from "../utils/categorization.ts";

// Get all docs for the full knowledge graph
const allDocs = await getCollection("docs");

// Extract unique tags and categories
const allTags = new Set();
const allCategories = new Set();

allDocs.forEach(doc => {
  if (doc.data.tags) {
    doc.data.tags.forEach(tag => allTags.add(tag));
  }
  if (doc.data.category) {
    allCategories.add(doc.data.category);
  }
});

// Build comprehensive graph data including meta-nodes for tags and categories
const graphNodes = [];

// Add document nodes
allDocs.forEach(doc => {
  graphNodes.push({
    id: doc.id,
    title: doc.data.title,
    url: `/docs/${doc.id}/`,
    nodeType: 'document',
    type: inferContentType(doc),
    category: doc.data.category,
    // Note: difficulty is inferred when needed
    tags: doc.data.tags || []
  });
});

// Add category nodes
allCategories.forEach(category => {
  graphNodes.push({
    id: `category:${category}`,
    title: category,
    nodeType: 'category',
    url: null
  });
});

// Add tag nodes
allTags.forEach(tag => {
  graphNodes.push({
    id: `tag:${tag}`,
    title: `#${tag}`,
    nodeType: 'tag',
    url: null
  });
});

const graphEdges = [];
allDocs.forEach(doc => {
  // Create edges to categories
  if (doc.data.category) {
    graphEdges.push({
      source: doc.id,
      target: `category:${doc.data.category}`,
      type: 'belongs-to-category',
      label: 'in category'
    });
  }
  
  // Create edges to tags
  if (doc.data.tags) {
    doc.data.tags.forEach(tag => {
      graphEdges.push({
        source: doc.id,
        target: `tag:${tag}`,
        type: 'has-tag',
        label: 'tagged'
      });
    });
  }
  
  // Create edges based on relationships
  if (doc.data.pattern) {
    const patternNode = graphNodes.find(n => n.id === `patterns/${doc.data.pattern}`);
    if (patternNode) {
      graphEdges.push({
        source: doc.id,
        target: patternNode.id,
        type: 'implements',
        label: 'implements'
      });
    }
  }
  
  if (doc.data.implementations) {
    doc.data.implementations.forEach(impl => {
      const implNode = graphNodes.find(n => n.id === `implementations/${impl}`);
      if (implNode) {
        graphEdges.push({
          source: doc.id,
          target: implNode.id,
          type: 'has-implementation',
          label: 'has implementation'
        });
      }
    });
  }
  
  if (doc.data.relatedPages) {
    doc.data.relatedPages.forEach(pageId => {
      const relatedNode = graphNodes.find(n => n.id === pageId);
      if (relatedNode) {
        graphEdges.push({
          source: doc.id,
          target: relatedNode.id,
          type: 'related',
          label: 'related to'
        });
      }
    });
  }
});

const fullGraphData = { nodes: graphNodes, edges: graphEdges };
---

<div class="wiki-knowledge-graph">
  <div class="graph-header">
    <h2>Knowledge Graph</h2>
    <p>Interactive visualization of all pages and their relationships. Click nodes to navigate.</p>
    
    <div class="graph-controls">
      <label class="control-item">
        <input type="checkbox" id="show-categories" checked />
        <span>Show Categories</span>
      </label>
      <label class="control-item">
        <input type="checkbox" id="show-tags" checked />
        <span>Show Tags</span>
      </label>
      <label class="control-item">
        <input type="checkbox" id="show-relationships" checked />
        <span>Show Relationships</span>
      </label>
    </div>
  </div>
  
  <div id="wiki-main-graph" class="main-graph-container"></div>
  
  <div class="graph-info">
    <div class="graph-stats">
      <div class="stat">
        <span class="stat-value">{graphNodes.length}</span>
        <span class="stat-label">Pages</span>
      </div>
      <div class="stat">
        <span class="stat-value">{graphEdges.length}</span>
        <span class="stat-label">Connections</span>
      </div>
    </div>
    
    <div class="graph-legend">
      <h4>Node Types</h4>
      <div class="legend-grid">
        <div class="legend-item">
          <span class="legend-dot pattern"></span>
          <span>Patterns</span>
        </div>
        <div class="legend-item">
          <span class="legend-dot implementation"></span>
          <span>Implementations</span>
        </div>
        <div class="legend-item">
          <span class="legend-dot guide"></span>
          <span>Guides</span>
        </div>
        <div class="legend-item">
          <span class="legend-dot tutorial"></span>
          <span>Tutorials</span>
        </div>
        <div class="legend-item">
          <span class="legend-shape category">▣</span>
          <span>Categories</span>
        </div>
        <div class="legend-item">
          <span class="legend-shape tag">◆</span>
          <span>Tags</span>
        </div>
      </div>
      
      <h4>Connections</h4>
      <div class="connection-legend">
        <div class="connection-item">
          <div class="connection-line implements"></div>
          <span>Implements</span>
        </div>
        <div class="connection-item">
          <div class="connection-line related"></div>
          <span>Related</span>
        </div>
        <div class="connection-item">
          <div class="connection-line category"></div>
          <span>Category</span>
        </div>
        <div class="connection-item">
          <div class="connection-line tag"></div>
          <span>Tagged</span>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ fullGraphData }}>
  // Create the main knowledge graph for wiki home
  const container = document.getElementById('wiki-main-graph');
  
  if (container && fullGraphData.nodes.length > 0) {
    const width = 600;
    const height = 400;
    
    // Create SVG
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('width', width);
    svg.setAttribute('height', height);
    svg.style.border = '1px solid #eee';
    svg.style.background = '#fff';
    svg.style.borderRadius = '3px';
    
    // Simple force-directed layout with better positioning
    const centerX = width / 2;
    const centerY = height / 2;
    
    const nodePositions = {};
    
    // Group nodes by type for organized layout
    const nodesByType = {};
    fullGraphData.nodes.forEach(node => {
      const type = node.nodeType === 'document' ? (node.type || 'default') : node.nodeType;
      if (!nodesByType[type]) nodesByType[type] = [];
      nodesByType[type].push(node);
    });
    
    // Position nodes with gravity toward center
    const typePositions = {
      pattern: { centerX: centerX - 80, centerY: centerY - 60, radius: 50, gravity: 0.8 },
      implementation: { centerX: centerX + 80, centerY: centerY - 60, radius: 50, gravity: 0.8 },
      guide: { centerX: centerX - 80, centerY: centerY + 60, radius: 40, gravity: 0.8 },
      tutorial: { centerX: centerX + 80, centerY: centerY + 60, radius: 40, gravity: 0.8 },
      category: { centerX: centerX, centerY: centerY - 120, radius: 60, gravity: 0.6 },
      tag: { centerX: centerX, centerY: centerY + 120, radius: 80, gravity: 0.6 },
      default: { centerX: centerX, centerY: centerY, radius: 30, gravity: 1.0 }
    };
    
    Object.entries(nodesByType).forEach(([type, nodes]) => {
      const pos = typePositions[type] || typePositions.default;
      nodes.forEach((node, index) => {
        const angle = (index / nodes.length) * 2 * Math.PI;
        // Apply gravity to pull nodes slightly toward center
        const distanceFromCenter = pos.radius * (0.7 + Math.random() * 0.3); // Add some variation
        const gravityX = (centerX - pos.centerX) * (1 - pos.gravity) * 0.3;
        const gravityY = (centerY - pos.centerY) * (1 - pos.gravity) * 0.3;
        
        nodePositions[node.id] = {
          x: pos.centerX + gravityX + Math.cos(angle) * distanceFromCenter,
          y: pos.centerY + gravityY + Math.sin(angle) * distanceFromCenter
        };
      });
    });
    
    // Draw edges
    fullGraphData.edges.forEach(edge => {
      const sourcePos = nodePositions[edge.source];
      const targetPos = nodePositions[edge.target];
      
      if (sourcePos && targetPos) {
        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('x1', sourcePos.x);
        line.setAttribute('y1', sourcePos.y);
        line.setAttribute('x2', targetPos.x);
        line.setAttribute('y2', targetPos.y);
        line.setAttribute('data-edge-type', edge.type);
        
        // Style based on edge type
        if (edge.type === 'implements') {
          line.setAttribute('stroke', '#666');
          line.setAttribute('stroke-width', '1.5');
          line.setAttribute('opacity', '0.8');
        } else if (edge.type === 'related') {
          line.setAttribute('stroke', '#888');
          line.setAttribute('stroke-width', '1');
          line.setAttribute('stroke-dasharray', '3,3');
          line.setAttribute('opacity', '0.6');
        } else if (edge.type === 'belongs-to-category') {
          line.setAttribute('stroke', '#bbb');
          line.setAttribute('stroke-width', '0.5');
          line.setAttribute('stroke-dasharray', '4,2');
          line.setAttribute('opacity', '0.4');
        } else if (edge.type === 'has-tag') {
          line.setAttribute('stroke', '#ddd');
          line.setAttribute('stroke-width', '0.5');
          line.setAttribute('stroke-dasharray', '2,2');
          line.setAttribute('opacity', '0.3');
        } else {
          line.setAttribute('stroke', '#eee');
          line.setAttribute('stroke-width', '0.5');
          line.setAttribute('opacity', '0.3');
        }
        
        svg.appendChild(line);
      }
    });
    
    // Draw nodes
    fullGraphData.nodes.forEach(node => {
      const pos = nodePositions[node.id];
      if (!pos) return;
      
      // Node styling based on type
      let nodeColor = '#999';
      let nodeSize = 4;
      let nodeShape = 'circle';
      
      if (node.nodeType === 'category') {
        nodeShape = 'square';
        nodeColor = '#444';
        nodeSize = 8;
      } else if (node.nodeType === 'tag') {
        nodeShape = 'diamond';
        nodeColor = '#888';
        nodeSize = 6;
      } else if (node.type === 'pattern') {
        nodeColor = '#333';
        nodeSize = 6;
      } else if (node.type === 'implementation') {
        nodeColor = '#555';
        nodeSize = 5;
      } else if (node.type === 'guide') {
        nodeColor = '#777';
        nodeSize = 4;
      } else if (node.type === 'tutorial') {
        nodeColor = '#666';
        nodeSize = 4;
      }
      
      // Create appropriate shape
      let shapeElement;
      if (nodeShape === 'square') {
        // Create rectangle for categories
        shapeElement = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        shapeElement.setAttribute('x', pos.x - nodeSize/2);
        shapeElement.setAttribute('y', pos.y - nodeSize/2);
        shapeElement.setAttribute('width', nodeSize);
        shapeElement.setAttribute('height', nodeSize);
      } else if (nodeShape === 'diamond') {
        // Create diamond shape for tags
        shapeElement = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
        const points = [
          `${pos.x},${pos.y - nodeSize}`,
          `${pos.x + nodeSize},${pos.y}`,
          `${pos.x},${pos.y + nodeSize}`,
          `${pos.x - nodeSize},${pos.y}`
        ].join(' ');
        shapeElement.setAttribute('points', points);
      } else {
        // Default circle for documents
        shapeElement = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        shapeElement.setAttribute('cx', pos.x);
        shapeElement.setAttribute('cy', pos.y);
        shapeElement.setAttribute('r', nodeSize);
      }
      
      shapeElement.setAttribute('fill', nodeColor);
      shapeElement.setAttribute('stroke', '#fff');
      shapeElement.setAttribute('stroke-width', '1');
      shapeElement.setAttribute('data-node-id', node.id);
      shapeElement.style.cursor = node.url ? 'pointer' : 'default';
      
      // Add click handler for navigation (only for documents with URLs)
      if (node.url) {
        shapeElement.addEventListener('click', () => {
          window.location.href = node.url;
        });
      }
      
      // Hover effects
      shapeElement.addEventListener('mouseenter', () => {
        shapeElement.setAttribute('stroke-width', '2');
        if (nodeShape === 'circle') {
          shapeElement.setAttribute('r', nodeSize + 2);
        } else if (nodeShape === 'square') {
          const currentSize = nodeSize + 4;
          shapeElement.setAttribute('x', pos.x - currentSize/2);
          shapeElement.setAttribute('y', pos.y - currentSize/2);
          shapeElement.setAttribute('width', currentSize);
          shapeElement.setAttribute('height', currentSize);
        }
        
        // Show tooltip
        const tooltip = document.createElement('div');
        tooltip.textContent = node.title;
        tooltip.className = 'graph-tooltip';
        tooltip.style.position = 'absolute';
        tooltip.style.background = '#000';
        tooltip.style.color = '#fff';
        tooltip.style.padding = '4px 8px';
        tooltip.style.fontSize = '11px';
        tooltip.style.borderRadius = '2px';
        tooltip.style.pointerEvents = 'none';
        tooltip.style.zIndex = '1000';
        tooltip.id = 'main-graph-tooltip';
        document.body.appendChild(tooltip);
      });
      
      shapeElement.addEventListener('mouseleave', () => {
        shapeElement.setAttribute('stroke-width', '1');
        if (nodeShape === 'circle') {
          shapeElement.setAttribute('r', nodeSize);
        } else if (nodeShape === 'square') {
          shapeElement.setAttribute('x', pos.x - nodeSize/2);
          shapeElement.setAttribute('y', pos.y - nodeSize/2);
          shapeElement.setAttribute('width', nodeSize);
          shapeElement.setAttribute('height', nodeSize);
        }
        
        const tooltip = document.getElementById('main-graph-tooltip');
        if (tooltip) tooltip.remove();
      });
      
      shapeElement.addEventListener('mousemove', (e) => {
        const tooltip = document.getElementById('main-graph-tooltip');
        if (tooltip) {
          tooltip.style.left = (e.pageX + 10) + 'px';
          tooltip.style.top = (e.pageY - 20) + 'px';
        }
      });
      
      svg.appendChild(shapeElement);
      
      // Add labels only for category and pattern nodes
      if (node.nodeType === 'category' || (node.type === 'pattern' && nodeSize >= 6)) {
        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x', pos.x);
        text.setAttribute('y', pos.y + nodeSize + 12);
        text.setAttribute('text-anchor', 'middle');
        text.setAttribute('font-family', 'monospace');
        text.setAttribute('font-size', '9');
        text.setAttribute('fill', '#666');
        text.setAttribute('data-node-id', node.id);
        text.style.cursor = 'pointer';
        text.textContent = node.title.length > 15 ? node.title.substring(0, 15) + '...' : node.title;
        
        // Click handler for text
        text.addEventListener('click', () => {
          window.location.href = node.url;
        });
        
        svg.appendChild(text);
      }
    });
    
    container.appendChild(svg);
    
    // Apply dark mode styling if needed
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      svg.style.background = '#1a1a1a';
      svg.style.borderColor = '#333';
      
      // Update text colors for dark mode
      const texts = svg.querySelectorAll('text');
      texts.forEach(text => {
        text.setAttribute('fill', '#ccc');
      });
    }
    
    // Add filtering functionality
    const showCategories = document.getElementById('show-categories');
    const showTags = document.getElementById('show-tags');
    const showRelationships = document.getElementById('show-relationships');
    
    function updateGraphVisibility() {
      const showCat = showCategories.checked;
      const showTag = showTags.checked;
      const showRel = showRelationships.checked;
      
      // Update node visibility
      svg.querySelectorAll('rect, polygon, circle').forEach(node => {
        const nodeId = node.getAttribute('data-node-id');
        if (nodeId) {
          if (nodeId.startsWith('category:')) {
            node.style.display = showCat ? 'block' : 'none';
          } else if (nodeId.startsWith('tag:')) {
            node.style.display = showTag ? 'block' : 'none';
          }
        }
      });
      
      // Update edge visibility
      svg.querySelectorAll('line').forEach(line => {
        const edgeType = line.getAttribute('data-edge-type');
        if (edgeType) {
          if (edgeType === 'belongs-to-category') {
            line.style.display = showCat ? 'block' : 'none';
          } else if (edgeType === 'has-tag') {
            line.style.display = showTag ? 'block' : 'none';
          } else if (edgeType === 'implements' || edgeType === 'has-implementation' || edgeType === 'related') {
            line.style.display = showRel ? 'block' : 'none';
          }
        }
      });
      
      // Update text labels
      svg.querySelectorAll('text').forEach(text => {
        const nodeId = text.getAttribute('data-node-id');
        if (nodeId) {
          if (nodeId.startsWith('category:')) {
            text.style.display = showCat ? 'block' : 'none';
          } else if (nodeId.startsWith('tag:')) {
            text.style.display = showTag ? 'block' : 'none';
          }
        }
      });
    }
    
    showCategories.addEventListener('change', updateGraphVisibility);
    showTags.addEventListener('change', updateGraphVisibility);
    showRelationships.addEventListener('change', updateGraphVisibility);
    
  } else {
    container.innerHTML = '<div class="no-graph">No graph data available</div>';
  }
</script>

<style>
  .wiki-knowledge-graph {
    margin: 30px 0;
  }
  
  .graph-header {
    margin-bottom: 20px;
  }
  
  .graph-header h2 {
    font-size: 16px;
    font-weight: bold;
    margin-bottom: 5px;
  }
  
  .graph-header p {
    font-size: 12px;
    color: #666;
    margin: 0 0 10px 0;
  }
  
  .graph-controls {
    display: flex;
    gap: 15px;
    font-size: 11px;
  }
  
  .control-item {
    display: flex;
    align-items: center;
    gap: 4px;
    cursor: pointer;
  }
  
  .control-item input[type="checkbox"] {
    cursor: pointer;
  }
  
  .main-graph-container {
    max-width: 600px;
    height: 400px;
    margin: 0 auto 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid #eee;
    background: #fff;
    border-radius: 3px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
  
  .graph-info {
    display: flex;
    gap: 30px;
    font-size: 11px;
  }
  
  .graph-stats {
    display: flex;
    gap: 20px;
  }
  
  .stat {
    text-align: center;
  }
  
  .stat-value {
    display: block;
    font-size: 18px;
    font-weight: bold;
    color: #333;
  }
  
  .stat-label {
    display: block;
    font-size: 10px;
    color: #666;
    margin-top: 2px;
  }
  
  .graph-legend h4 {
    font-size: 11px;
    font-weight: bold;
    margin-bottom: 8px;
    margin-top: 0;
  }
  
  .legend-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 4px 15px;
    margin-bottom: 15px;
  }
  
  .legend-item {
    display: flex;
    align-items: center;
    gap: 4px;
    font-size: 10px;
  }
  
  .legend-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    border: 1px solid #fff;
  }
  
  .legend-dot.pattern { background: #333; }
  .legend-dot.implementation { background: #666; }
  .legend-dot.guide { background: #777; }
  .legend-dot.tutorial { background: #555; }
  .legend-dot.default { background: #999; }
  
  .legend-shape {
    display: inline-block;
    font-size: 12px;
    color: #444;
    font-weight: bold;
  }
  
  .connection-legend {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }
  
  .connection-item {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 10px;
  }
  
  .connection-line {
    width: 20px;
    height: 2px;
  }
  
  .connection-line.implements {
    background: #333;
  }
  
  .connection-line.related {
    background: #666;
    background-image: repeating-linear-gradient(90deg, #666 0, #666 3px, transparent 3px, transparent 6px);
  }
  
  .connection-line.category {
    background: #aaa;
    background-image: repeating-linear-gradient(90deg, #aaa 0, #aaa 5px, transparent 5px, transparent 7px);
  }
  
  .connection-line.tag {
    background: #ccc;
    background-image: repeating-linear-gradient(90deg, #ccc 0, #ccc 2px, transparent 2px, transparent 4px);
  }
  
  .no-graph {
    text-align: center;
    color: #666;
    font-size: 12px;
    padding: 40px;
  }
  
  @media (prefers-color-scheme: dark) {
    .graph-header p {
      color: #aaa;
    }
    
    .main-graph-container {
      border-color: #333;
      background: #1a1a1a;
    }
    
    .stat-value {
      color: #ccc;
    }
    
    .stat-label {
      color: #999;
    }
    
    .no-graph {
      color: #999;
    }
  }
  
  @media (max-width: 768px) {
    .main-graph-container {
      height: 400px;
    }
    
    .graph-info {
      flex-direction: column;
      gap: 15px;
    }
    
    .legend-grid {
      grid-template-columns: 1fr;
    }
  }
</style>