---
import { 
  getCategoryPath, 
  TAG_FACETS, 
  validateDocumentCategorization,
  inferContentType,
  inferDifficulty
} from "../utils/categorization.ts";

interface Props {
  doc: any; // CollectionEntry<"docs">
}

const { doc } = Astro.props;

// Infer metadata instead of using explicit fields
const contentType = inferContentType(doc);
const difficulty = inferDifficulty(doc);

// Get category path
const categoryPath = doc.data.category ? getCategoryPath(doc.data.category) : [];

// Group tags by facet
const tagsByFacet = (doc.data.tags || []).reduce((acc, tag) => {
  const normalizedTag = tag.toLowerCase().replace(/\s+/g, '-');
  let facet = 'other';
  
  for (const [f, values] of Object.entries(TAG_FACETS)) {
    if (values.includes(normalizedTag)) {
      facet = f;
      break;
    }
  }
  
  if (!acc[facet]) acc[facet] = [];
  acc[facet].push(tag);
  return acc;
}, {} as Record<string, string[]>);

// Get validation status
const validation = validateDocumentCategorization(doc);

// Determine collection
const collection = doc.id.split('/')[0];
---

<div class="categorization-meta">
  <!-- Collection Badge -->
  <div class="meta-row">
    <span class="meta-label">Collection:</span>
    <span class="collection-badge">{collection}</span>
  </div>

  <!-- Category Path -->
  {categoryPath.length > 0 && (
    <div class="meta-row">
      <span class="meta-label">Category:</span>
      <div class="category-path">
        {categoryPath.map((cat, index) => (
          <>
            {index > 0 && <span class="separator">›</span>}
            <span class="category-item">{cat.name}</span>
          </>
        ))}
      </div>
    </div>
  )}

  <!-- Tags by Facet -->
  {Object.keys(tagsByFacet).length > 0 && (
    <div class="meta-row tags-row">
      <span class="meta-label">Tags:</span>
      <div class="tags-by-facet">
        {Object.entries(tagsByFacet).map(([facet, tags]) => (
          <div class="facet-tags">
            <span class="facet-label">{facet}:</span>
            {tags.map(tag => (
              <span class="tag" data-facet={facet}>{tag}</span>
            ))}
          </div>
        ))}
      </div>
    </div>
  )}

  <!-- Content Type (inferred) -->
  <div class="meta-row">
    <span class="meta-label">Type:</span>
    <span class="template-type">{contentType}</span>
  </div>

  <!-- Difficulty (inferred) -->
  <div class="meta-row">
    <span class="meta-label">Level:</span>
    <span class="difficulty" data-level={difficulty}>{difficulty}</span>
  </div>

  <!-- Validation Status -->
  {!validation.valid && (
    <div class="validation-warning">
      <span class="warning-icon">⚠</span>
      <span>Incomplete categorization</span>
      <ul class="validation-issues">
        {validation.issues.map(issue => (
          <li>{issue}</li>
        ))}
      </ul>
    </div>
  )}
</div>

<style>
  .categorization-meta {
    margin: 15px 0;
    padding: 12px;
    background: #f9f9f9;
    border: 1px solid #eee;
    border-radius: 3px;
    font-family: monospace;
    font-size: 11px;
  }

  .meta-row {
    display: flex;
    align-items: flex-start;
    margin-bottom: 8px;
    gap: 10px;
  }

  .meta-row:last-child {
    margin-bottom: 0;
  }

  .meta-label {
    font-weight: bold;
    color: #666;
    min-width: 80px;
  }

  .collection-badge {
    display: inline-block;
    padding: 2px 8px;
    background: #333;
    color: #fff;
    border-radius: 2px;
    font-size: 10px;
    text-transform: uppercase;
  }

  .category-path {
    display: flex;
    align-items: center;
    gap: 5px;
  }

  .category-item {
    padding: 2px 6px;
    background: #e0e0e0;
    border-radius: 2px;
  }

  .separator {
    color: #999;
    font-size: 12px;
  }

  .tags-row {
    align-items: flex-start;
  }

  .tags-by-facet {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .facet-tags {
    display: flex;
    align-items: center;
    gap: 5px;
  }

  .facet-label {
    font-size: 10px;
    color: #888;
    text-transform: capitalize;
  }

  .tag {
    display: inline-block;
    padding: 2px 6px;
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 2px;
    font-size: 10px;
  }

  .tag[data-facet="concept"] {
    background: #e3f2fd;
    border-color: #90caf9;
  }

  .tag[data-facet="technology"] {
    background: #fff3e0;
    border-color: #ffb74d;
  }

  .tag[data-facet="difficulty"] {
    background: #f3e5f5;
    border-color: #ce93d8;
  }

  .tag[data-facet="domain"] {
    background: #e8f5e9;
    border-color: #81c784;
  }

  .template-type {
    padding: 2px 8px;
    background: #666;
    color: #fff;
    border-radius: 2px;
    font-size: 10px;
  }

  .difficulty {
    padding: 2px 8px;
    border-radius: 2px;
    font-size: 10px;
    font-weight: bold;
  }

  .difficulty[data-level="beginner"] {
    background: #d4edda;
    color: #155724;
  }

  .difficulty[data-level="intermediate"] {
    background: #fff3cd;
    color: #856404;
  }

  .difficulty[data-level="advanced"] {
    background: #f8d7da;
    color: #721c24;
  }

  .validation-warning {
    margin-top: 10px;
    padding: 8px;
    background: #fef6f6;
    border: 1px solid #f8d7da;
    border-radius: 2px;
    color: #721c24;
  }

  .warning-icon {
    margin-right: 5px;
    font-size: 12px;
  }

  .validation-issues {
    list-style: none;
    margin: 5px 0 0 20px;
    padding: 0;
  }

  .validation-issues li {
    font-size: 10px;
    margin-bottom: 2px;
  }

  .validation-issues li::before {
    content: "• ";
    margin-right: 3px;
  }

  @media (prefers-color-scheme: dark) {
    .categorization-meta {
      background: #222;
      border-color: #333;
    }

    .meta-label {
      color: #999;
    }

    .category-item {
      background: #444;
      color: #ccc;
    }

    .tag {
      background: #333;
      border-color: #444;
      color: #ccc;
    }

    .tag[data-facet="concept"] {
      background: #1a3a4a;
      border-color: #2a5a7a;
    }

    .tag[data-facet="technology"] {
      background: #4a3a1a;
      border-color: #6a5a2a;
    }

    .tag[data-facet="difficulty"] {
      background: #3a2a4a;
      border-color: #5a4a6a;
    }

    .tag[data-facet="domain"] {
      background: #2a4a2a;
      border-color: #4a6a4a;
    }

    .validation-warning {
      background: #3a1a1a;
      border-color: #5a2a2a;
      color: #f88;
    }
  }
</style>